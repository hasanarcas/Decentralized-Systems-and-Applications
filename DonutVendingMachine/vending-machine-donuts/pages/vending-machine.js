import Head from 'next/head'
import { useState, useEffect} from 'react';
import Web3 from "web3";
import "bulma/css/bulma.css";
import styles from "../styles/VendingMachine.module.css"
import vmContract from '../blockchain/vending';

const VendingMachine = () => {
    const [error, setError] = useState("");
    const [successMsg, setSuccessMsg] = useState("");
    const [inventory, setInventory] = useState("");
    const [myDonutsCount, setMyDonutsCount] = useState("");
    const [buyCount, setBuyCount] = useState("");
    const [web3, setWeb3] = useState(null);
    const [address, setAddress] = useState(null);
    const [VendingMachineContract, setVendingMachineContract] = useState(null);

    useEffect(() => {
        if (VendingMachineContract) getInventoryHandler();
        if (VendingMachineContract && address) getMyDonutsCountHandler();
    }, [VendingMachineContract, address]);

    const getInventoryHandler = async () => {
        const inventory = await VendingMachineContract.methods.getVendingMachineBalance().call();
        setInventory(inventory);
    }

    const getMyDonutsCountHandler = async () => {
        const accounts = await web3.eth.getAccounts();
        const count = await VendingMachineContract.methods.donutBalances(address).call();
        setMyDonutsCount(count);
    }

    const updateDonutQty = event => {
        setBuyCount(event.target.value);
    }

    const buyDonutHandler = async () => {
        try{
            await VendingMachineContract.methods.purchase(buyCount).send({
                from: address,
                value: web3.utils.toWei("0.01", "ether") * buyCount
            });
            setSuccessMsg("donut purchase successful");
        } catch (err) {
            setError(err.message);
        }
        

    }

    const connectWalletHandler = async () => {
        if(typeof window !== "undefined" && typeof window.ethereum !== "undefined") {
            try {
                await window.ethereum.request({ method: "eth_requestAccounts" })
                web3 = new Web3(window.ethereum);
                setWeb3(web3);

                const accounts = await web3.eth.getAccounts();
                setAddress(address);

                const vm = vmContract(web3);
                setVendingMachineContract(vm);

            } catch (error) {
                setError(error.message);
            }
        } else {
            alert("Please install Metamask");
        }
    }

    return (
        <div className={styles.main}>
            <Head>
                <title>Vending Machine App</title>
                <meta name="description" content="Generated by create next app" />
            </Head>
            <nav className="navbar mt-4 mb-4">
                <div className="container">
                    <div className="navbar-brand">
                        <h1>Vending Machine</h1>
                    </div>
                    <div className="navbar-end">
                        <button onClick={connectWalletHandler} className='button is-primary'>Connect Wallet</button>
                    </div>
                </div>
            </nav>
            <section>
                <div className="container">
                    <h2>Vending Machine inventory: {inventory}</h2>
                </div>
            </section>
            <section>
                <div className="container">
                    <h2>My Donuts: {myDonutsCount}</h2>
                </div>
            </section>
            <section className='mt-5'>
                <div className="container">
                    <div className="field">
                        <label className="label">Buy donuts</label>
                        <div className="control">
                            <input onChange={updateDonutQty} type="text" className="input" placeholder='Enter Amount' />
                        </div>
                        <button onClick={buyDonutHandler} className='button is-primary mt-2'>Buy</button>
                    </div>
                </div>
            </section>
            <section>
                <div className="container has-text-danger">
                    <p>{error}</p>
                </div>
            </section>
            <section>
                <div className="container has-text-success">
                    <p>{successMsg}</p>
                </div>
            </section>
        </div>
        
    )
}
 
export default VendingMachine;
